datTotal$group<- as.data.frame(grp)
summary(datTotal)
as.factor(grp)
datTotal_sca$group<- as.factor(grp)
summary(datTotal)
summary(datTotal_sca)
i = 5 # Change this manually to generate multiple plots
grp <- cutree(res.hc, k = i)
# 7. Define sample groups
datTotal$group<- as.factor(grp)
datTotal_sca$group<- as.factor(grp)
summary(datTotal_sca)
summary(datTotal)
# Check that there are people of each group in train and test
datTrain<- datTotal[c(1:nrow(datTrain)),]
unique(datTrain$group)
datTest<- datTotal[c((nrow(datTrain)+1):nrow(datTest)),]
unique(datTrain$group)
unique(datTest$group)
datTrain_sca<- datTotal_sca[c(1:nrow(datTrain)),]
datTest_sca<- datTotal_sca[c((nrow(datTrain)+1):nrow(datTest)),]
# Check that there are people of each group in train and test
unique(datTrain$group)
unique(datTest$group)
datTotal<- cbind(datTotal, probTotal)
datTrain<- datTotal[c(1:nrow(datTrain)),]
datTest<- datTotal[c((nrow(datTrain)+1):nrow(datTest)),]
datTotal_sca<- cbind(datTotal_sca, probTotal)
datTotal_sca
# 1. Carga de datos ----
datTrain<- readRDS("train_clean")
datTest<- readRDS("test_clean")
datTotal<- rbind(datTrain[,c(2:ncol(datTrain))], datTest)
datTrain_sca<- readRDS("train_clean_sca")
datTest_sca<- readRDS("test_clean_sca")
datTotal_sca<- rbind(datTrain_sca[,c(2:ncol(datTrain_sca))], datTest_sca)
## 1.1. Carga de predicciones ----
probTrain<- readRDS("./tab/probTrain.csv")
probTest<- readRDS("./tab/probTest.csv")
probTotal<- rbind(probTrain[,c(1,3:ncol(probTrain))], probTest)
binTrain<- readRDS("./tab/binTrain.csv")
binTest<- readRDS("./tab/binbTest.csv")
binTotal<- rbind(binTrain[,c(1,3:ncol(binTrain))], binTest)
# 7. Define sample groups
datTotal$group<- as.factor(grp)
datTrain<- datTotal[c(1:nrow(datTrain)),]
datTest<- datTotal[c((nrow(datTrain)+1):nrow(datTest)),]
datTotal_sca$group<- as.factor(grp)
datTrain_sca<- datTotal_sca[c(1:nrow(datTrain)),]
datTest_sca<- datTotal_sca[c((nrow(datTrain)+1):nrow(datTest)),]
datFIN<- cbind(datTotal, probTotal)
datFIN_sca<- cbind(datTotal_sca, probTotal)
saveRDS(datTrain, "train_clean_g")
saveRDS(datTest, "test_clean_g")
saveRDS(datTotal, "total_clean_g")
saveRDS(datTrain_sca, "train_clean_sca_g")
saveRDS(datTest_sca, "test_clean_sca_g")
saveRDS(datTotal_sca, "total_clean_sca_g")
# 1. Carga de datos ----
datTrain<- readRDS("train_clean")
datTrain$group<- datTotal$group[c(1:nrow(datTrain))]
datTrain
datTrain<- readRDS("train_clean")
datTest<- readRDS("test_clean")
datTotal<- rbind(datTrain[,c(2:ncol(datTrain))], datTest)
datTrain_sca<- readRDS("train_clean_sca")
datTest_sca<- readRDS("test_clean_sca")
datTotal_sca<- rbind(datTrain_sca[,c(2:ncol(datTrain_sca))], datTest_sca)
# 7. Define sample groups
datTotal$group<- as.factor(grp)
datTrain$group<- datTotal$group[c(1:nrow(datTrain))]
datTest$group<- datTotal$group[c((nrow(datTrain)+1):nrow(datTest))]
datTest
datTest<- readRDS("test_clean")
datTest
# 1. Carga de datos ----
datTrain<- readRDS("train_clean")
datTrain
head(datTest)
datTest<- readRDS("test_clean")
datTotal<- rbind(datTrain[,c(2:ncol(datTrain))], datTest)
datTrain_sca<- readRDS("train_clean_sca")
datTest_sca<- readRDS("test_clean_sca")
datTotal_sca<- rbind(datTrain_sca[,c(2:ncol(datTrain_sca))], datTest_sca)
length(as.factor(grp))
c((nrow(datTrain)+1):nrow(datTest))
row.names(datTest)
c((nrow(datTrain)+1):nrow(datTotal))
# 7. Define sample groups ----
datTotal$group<- as.factor(grp)
datTrain$group<- datTotal$group[c(1:nrow(datTrain))]
datTest$group<- datTotal$group[c((nrow(datTrain)+1):nrow(datTotal))]
datTotal_sca$group<- as.factor(grp)
datTrain_sca$group<- datTotal_sca$group[c(1:nrow(datTrain))]
datTest_sca$group<- datTotal_sca$group[c((nrow(datTrain)+1):nrow(datTotal))]
datFIN<- cbind(datTotal, probTotal)
datFIN_sca<- cbind(datTotal_sca, probTotal)
# Check that there are people of each group in train and test
unique(datTrain$group)
unique(datTest$group)
saveRDS(datTrain, "train_clean_g")
saveRDS(datTest, "test_clean_g")
saveRDS(datTotal, "total_clean_g")
saveRDS(datTrain_sca, "train_clean_sca_g")
saveRDS(datTest_sca, "test_clean_sca_g")
saveRDS(datTotal_sca, "total_clean_sca_g")
## 7.1 First ----
datTrain %>%
select(group, "1")
## 7.1 First ----
datTrain %>%
select(group, 1)
datTrain[datTrain$group == 1, ]
## 7.1 First ----
groupTrain_IDs<- data.frame()
## 7.1 First ----
groupTrain_IDs<- data.frame()
for(i in c(1:5)){
col<- paste("gro", i, sep="")
groupTrain_IDs[[col]] == rownames(datTrain[datTrain$group == 1,])
}
groupTrain_IDs
rownames(datTrain[datTrain$group == i,])
i
View(binTrain)
binTrain$y[binTrain$PassengerId %in% datTrain[datTrain$group == 1, ]]
binTrain$y[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == 1, ])]
binTrain[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == 1, ])]
binTrain[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == 1, ]),]
## 7.1 First ----
Acc_group<- data.frame(colnames = colnames(binTotal))
Acc_group
?data.frame
## 7.1 First ----
Acc_group<- data.frame(model = colnames(binTotal))
Acc_group
## 7.1 First ----
Acc_group<- data.frame(model = colnames(binTrain)[c(3:ncol(binTrain))])
Acc_group
col<- paste("gro", i, sep="")
col
in_g<- binTrain[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == 1, ]),]
in_g
colum = c()
for(j in seq(3,ncol(in_g))){
acc<- sum(abs(as.numeric(in_g[,j]) - as.numeric(in_g[,2])))/nrow(in_g)
colum<- c(colum, acc)
}
colum
as.numeric(in_g[,j])
as.numeric(in_g[,2])
sum(abs(as.numeric(in_g[,j]) - as.numeric(in_g[,2])))
acc<- 1 - (sum(abs(as.numeric(in_g[,j]) - as.numeric(in_g[,2])))/nrow(in_g))
acc
for(j in seq(3,ncol(in_g))){
acc<- 1 - (sum(abs(as.numeric(in_g[,j]) - as.numeric(in_g[,2])))/nrow(in_g))
colum<- c(colum, acc)
}
Acc_group[[col]] == colum
Acc_group
Acc_group[[col]]<- colum
colum = c()
for(j in seq(3,ncol(in_g))){
acc<- 1 - (sum(abs(as.numeric(in_g[,j]) - as.numeric(in_g[,2])))/nrow(in_g))
colum<- c(colum, acc)
}
Acc_group[[col]]<- colum
Acc_group
## 7.1 First ----
Acc_group<- data.frame(model = colnames(binTrain)[c(3:ncol(binTrain))])
for(i in c(1:5)){
col<- paste("gro", i, sep="")
in_g<- binTrain[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == 1, ]),]
colum = c()
for(j in seq(3,ncol(in_g))){
acc<- 1 - (sum(abs(as.numeric(in_g[,j]) - as.numeric(in_g[,2])))/nrow(in_g))
colum<- c(colum, acc)
}
Acc_group[[col]]<- colum
}
Acc_group
tail(Acc_group[order(Acc_group$gro1),], 5)
tail(Acc_group[order(Acc_group$gro2),], 5)
## 7.1 First ----
Acc_group<- data.frame(model = colnames(binTrain)[c(3:ncol(binTrain))])
for(i in c(1:5)){
col<- paste("gro", i, sep="")
in_g<- binTrain[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == i, ]),]
colum = c()
for(j in seq(3,ncol(in_g))){
acc<- 1 - (sum(abs(as.numeric(in_g[,j]) - as.numeric(in_g[,2])))/nrow(in_g))
colum<- c(colum, acc)
}
Acc_group[[col]]<- colum
}
tail(Acc_group[order(Acc_group$gro1),], 5)
tail(Acc_group[order(Acc_group$gro2),], 5)
tail(Acc_group[order(Acc_group$gro3),], 5)
tail(Acc_group[order(Acc_group$gro4),], 5)
tail(Acc_group[order(Acc_group$gro5),], 5)
tail(Acc_group[order(Acc_group$gro1),], 5)$model
as.character(tail(Acc_group[order(Acc_group$gro1),], 5)$model)
as.character(tail(Acc_group[order(Acc_group$gro1),], 5)[[paste("gro", i, sep="")]])
as.numeric(tail(Acc_group[order(Acc_group$gro1),], 5)[[paste("gro", i, sep="")]])
acc<- as.numeric(tail(Acc_group[order(Acc_group$gro1),], 4)[[paste("gro", i, sep="")]])
acc/sum(acc)
binTrain[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == i, ]),best]
best<- as.character(tail(Acc_group[order(Acc_group$gro1),], 5)$model)
best
in_g<- binTrain[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == i, ]), best]
in_g
rowMeans(in_g)
rowMeans(as.numeric(in_g))
in_g<- binTotal_man[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == i, ]), best]
in_g
binTrain$PassengerId %in% rownames(datTrain[datTrain$group == i, ])
binTotal[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == i, ]), best]
as.numeric(in_g)
binTotal_man[,c(2:ncol(binTotal))]
# 7.2 Predictions of the best ----
bin_num<- binTotal_man[,c(2:ncol(binTotal))]
in_g<- bin_num[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == i, ]), best]
in_g
rowMeans((in_g))
ifelse(rowMeans(in_g) < 0.5, 0, 1)
as.factor(ifelse(rowMeans(in_g) < 0.5, 0, 1))
# 7.2 Predictions of the best ----
bin_num<- binTotal_man[c(1:nrow(binTrain)),c(2:ncol(binTotal))]
bin_num
in_g<- bin_num[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == i, ]), best]
in_g
in_g<- bin_num[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == i, ]), best]
in_g
in_g<- bin_num[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == i, ]), best]
as.factor(ifelse(rowMeans(in_g) < 0.5, 0, 1))
pon * rowMeans(in_g)
pon<- acc/sum(acc)
pon * rowMeans(in_g)
pon
rowMeans(in_g)
pon * in_g
rowSums(pon * in_g)
sum(pon)
rowSums(pon * in_g)
pon * in_g
pon
best<- as.character(tail(Acc_group[order(Acc_group$gro1),], 5)$model)
acc<- as.numeric(tail(Acc_group[order(Acc_group$gro1),], 5)[[paste("gro", i, sep="")]])
pon<- acc/sum(acc)
pon
in_g<- bin_num[binTrain$PassengerId %in% rownames(datTrain[datTrain$group == i, ]), best]
rowSums(pon * in_g)
rownames(as.factor(ifelse(rowMeans(in_g) < 0.5, 0, 1)))
ifelse(rowMeans(in_g) < 0.5, 0, 1)
comment(ifelse(rowMeans(in_g) < 0.5, 0, 1))
aaa<- ifelse(rowMeans(in_g) < 0.5, 0, 1)
as.factor(ifelse(rowMeans(in_g) < 0.5, 0, 1))
names(as.factor(ifelse(rowMeans(in_g) < 0.5, 0, 1)))
in_g
rowSums(pon * in_g)
probTrain$PassengerId
g_names<- rownames(datTrain[datTrain$group == i, ])
g_names
# Selection
best<- as.character(tail(Acc_group[order(Acc_group$gro1),], 5)$model)
acc<- as.numeric(tail(Acc_group[order(Acc_group$gro1),], 5)[[paste("gro", i, sep="")]])
pon<- acc/sum(acc)
g_names<- rownames(datTrain[datTrain$group == i, ])
# Evaluation
m_pred<- as.factor(ifelse(rowMeans(in_g)<0.5, 0,1))
m_pred
m_p_pred<- as.factor(ifelse(rowSums(pon * in_g)<0.5, 0,1))rowSums(pon * in_g)
m_p_pred<- as.factor(ifelse(rowSums(pon * in_g)<0.5, 0,1))
m_p_pred
df_names<- c(df_names, g_names)
# 7.2 Predictions of the best ----
df_names<- c()
pred_mean<- c()
pred_mean_pond<- c()
df_names<- c(df_names, g_names)
df_names
pred_mean_pond<- c(pred_mean_pond, m_p_pred)
pred_mean<- c(pred_mean, m_pred)
pred_mean_pond<- c(pred_mean_pond, m_p_pred)
pred_mean
pred_mean_pond
# 7.2 Predictions of the best ----
df_names<- c()
pred_mean<- c()
pred_mean_pond<- c()
for(i in c(1:5)){
# Selection
best<- as.character(tail(Acc_group[order(Acc_group$gro1),], 5)$model)
acc<- as.numeric(tail(Acc_group[order(Acc_group$gro1),], 5)[[paste("gro", i, sep="")]])
pon<- acc/sum(acc)
g_names<- rownames(datTrain[datTrain$group == i, ])
in_g<- probTrain[probTrain$PassengerId %in% g_names, best]
# Evaluation
m_pred<- as.factor(ifelse(rowMeans(in_g)<0.5, 0,1))
m_p_pred<- as.factor(ifelse(rowSums(pon * in_g)<0.5, 0,1))
df_names<- c(df_names, g_names)
pred_mean<- c(pred_mean, m_pred)
pred_mean_pond<- c(pred_mean_pond, m_p_pred)
}
pred_mean_pond
m_p_pred
pred_mean_pond
pred_mean<- factor()
pred_mean_pond<- factor()
m_pred
pred_mean<- c(pred_mean, m_pred)
pred_mean
pred_mean<- as.factor(c(pred_mean, m_pred))
pred_mean
pred_mean<- factor()
pred_mean<- as.factor(c(pred_mean, m_pred))
pred_mean
# 7.2 Predictions of the best ----
df_names<- c()
pred_mean<- factor()
pred_mean_pond<- factor()
for(i in c(1:5)){
# Selection
best<- as.character(tail(Acc_group[order(Acc_group$gro1),], 5)$model)
acc<- as.numeric(tail(Acc_group[order(Acc_group$gro1),], 5)[[paste("gro", i, sep="")]])
pon<- acc/sum(acc)
g_names<- rownames(datTrain[datTrain$group == i, ])
in_g<- probTrain[probTrain$PassengerId %in% g_names, best]
# Evaluation
m_pred<- ifelse(rowMeans(in_g)<0.5, 0,1)
m_p_pred<- ifelse(rowSums(pon * in_g)<0.5, 0,1)
df_names<- c(df_names, g_names)
pred_mean<- c(pred_mean, m_pred)
pred_mean_pond<- c(pred_mean_pond, m_p_pred)
}
names(binTrain)
as.factor(pred_mean)
Sub_best_mean<- data.frame(PassengerId = df_names, Survived = as.factor(pred_mean))
Sub_best_mean_pond<- data.frame(PassengerId = df_names, Survived = as.factor(pred_mean_pond))
Sub_best_mean
Sub_best_mean<- Sub_best_mean[order(Sub_best_mean$PassengerId),]
Sub_best_mean
Sub_best_mean<- data.frame(PassengerId = as.numeric(df_names), Survived = as.factor(pred_mean))
Sub_best_mean<- Sub_best_mean[order(Sub_best_mean$PassengerId),]
Sub_best_mean
Sub_best_mean_pond<- data.frame(PassengerId = as.numeric(df_names), Survived = as.factor(pred_mean_pond))
Sub_best_mean_pond<- Sub_best_mean_pond[order(Sub_best_mean_pond$PassengerId),]
all(as.numeric(Sub_best_mean$Survived) - as.numeric(Sub_best_mean_pond$Survived) == 0)
as.numeric(Sub_best_mean$Survived) - as.numeric(Sub_best_mean_pond$Survived) == 0
fwrite(Sub_best_mean, "./sub/best_mean_sub.csv", row.names = FALSE)
fwrite(Sub_best_mean_pond, "./sub/best_mean_pond_sub.csv", row.names = FALSE)
Sub_best_mean
as.factor(pred_mean) != binTrain$y
as.factor(Sub_best_mean$Survived) != binTrain$y
datTest[datTest$group == i, ]
df_names<- c()
pred_mean<- factor()
pred_mean_pond<- factor()
for(i in c(1:5)){
# Selection
best<- as.character(tail(Acc_group[order(Acc_group$gro1),], 5)$model)
acc<- as.numeric(tail(Acc_group[order(Acc_group$gro1),], 5)[[paste("gro", i, sep="")]])
pon<- acc/sum(acc)
g_names<- rownames(datTest[datTest$group == i, ])
in_g<- probTest[probTest$PassengerId %in% g_names, best]
# Evaluation
m_pred<- ifelse(rowMeans(in_g)<0.5, 0,1)
m_p_pred<- ifelse(rowSums(pon * in_g)<0.5, 0,1)
df_names<- c(df_names, g_names)
pred_mean<- c(pred_mean, m_pred)
pred_mean_pond<- c(pred_mean_pond, m_p_pred)
}
pred_mean_pond
pred_mean
Sub_best_mean<- data.frame(PassengerId = as.numeric(df_names), Survived = as.factor(pred_mean))
Sub_best_mean<- Sub_best_mean[order(Sub_best_mean$PassengerId),]
Sub_best_mean
Sub_best_mean_pond<- data.frame(PassengerId = as.numeric(df_names), Survived = as.factor(pred_mean_pond))
Sub_best_mean_pond<- Sub_best_mean_pond[order(Sub_best_mean_pond$PassengerId),]
Sub_best_mean_pond
# Cuantos cambian su destino
all(as.numeric(Sub_best_mean$Survived) - as.numeric(Sub_best_mean_pond$Survived) == 0)
as.numeric(Sub_best_mean$Survived) - as.numeric(Sub_best_mean_pond$Survived) == 0
fwrite(Sub_best_mean, "./sub/best_mean_sub.csv", row.names = FALSE)
fwrite(Sub_best_mean_pond, "./sub/best_mean_pond_sub.csv", row.names = FALSE)
library(klaR)
install.packages("klaR")
setwd("~/Desktop/Santi/master_BD/machine_learning/entrega/")
library(dplyr)
library(klaR)
library(ggplot2)
library(data.table)
library(tidyr)
library(gridExtra)
library(caret)
library(ggplot2)
source("funcionesML.R")
# 1. Carga de datos ----
datTrain_sca<- readRDS("train_clean_sca")
datTest_sca<- readRDS("test_clean_sca")
datTotal_sca<- rbind(datTrain_sca[,c(2:ncol(datTrain_sca))], datTest_sca)
probTrain<- readRDS("./tab/probTrain.csv")
probTest<- readRDS("./tab/probTest.csv")
probTotal<- rbind(probTrain[,c(1,3:ncol(probTrain))], probTest)
datFIN_sca<- cbind(datTotal_sca, probTotal)
# Submission
submission<- data.frame(PassengerId = as.numeric(row.names(datTest_sca)))
submission
# 2. Model
model<-train(Survived~., data = datFIN_sca[c(1:nrow(datTrain_sca)),],
method="nb",
metric="ROC",
trControl = trainControl(method = "repeatedcv",
number=8, repeats=10,
savePredictions = "all",
summaryFunction=twoClassSummary,
classProbs=TRUE, returnResamp="all",
verboseIter=FALSE)
)
datTrain_fin<- cbind(datTrain_sca, probTrain)
datTrain_fin
datTrain_fin<- cbind(datTrain_sca, probTrain[,c(2:ncol(datTrain_sca))])
datTrain_fin
# 1. Carga de datos ----
datTrain_sca<- readRDS("train_clean_sca_g")
datTest_sca<- readRDS("test_clean_sca_g")
datTotal_sca<- rbind(datTrain_sca[,c(2:ncol(datTrain_sca))], datTest_sca)
probTrain<- readRDS("./tab/probTrain.csv")
probTest<- readRDS("./tab/probTest.csv")
probTotal<- rbind(probTrain[,c(1,3:ncol(probTrain))], probTest)
datTrain_fin<- cbind(datTrain_sca, probTrain[,c(3:ncol(datTrain_sca))])
datTrain_fin
summary(datTrain_fin)
# Submission
submission<- data.frame(PassengerId = as.numeric(row.names(datTest_sca)))
# 2. Model
model<-train(Survived~., data = datTrain_fin,
method="nb",
metric="ROC",
trControl = trainControl(method = "repeatedcv",
number=8, repeats=10,
savePredictions = "all",
summaryFunction=twoClassSummary,
classProbs=TRUE, returnResamp="all",
verboseIter=FALSE)
)
# 2. Model
datTrain_fin$Survived<-make.names(datTrain_fin$Survived)
model<-train(Survived~., data = datTrain_fin,
method="nb",
metric="ROC",
trControl = trainControl(method = "repeatedcv",
number=8, repeats=10,
savePredictions = "all",
summaryFunction=twoClassSummary,
classProbs=TRUE, returnResamp="all",
verboseIter=FALSE)
)
mod_info<- as.data.frame(myMetric(vcr$resample))
mod_info<- as.data.frame(myMetric(model$resample))
mod_info
fam<- sub("^([A-Za-z]+)_.*", "\\1", modelos.nombres[i], perl=TRUE)
View(mod_info)
cv_all<- readRDS("./tab/cv_all")
cv_all
total<- data.frame(metric = mod_info$metric,
ROC = mod_info$ROC,
modelo = "bayes",
family = "bay")
saveRDS(model, paste("./mod/", "bayes", sep=""))
cv_all<- rbind(cv_all, total)
cv_all
medias<- as.data.frame(aggregate(metric~modelo, data=cv_all, mean))
ggplot(cv_all, aes(x=modelo, y=metric, fill=family)) +
geom_boxplot(outlier.colour="red", outlier.shape=20,
outlier.size=2) +
stat_summary(fun.y=mean, geom="point", colour="white",fill="grey", shape=21, size=3) +
scale_x_discrete(limits=as.vector(medias[order(medias$metric), c("modelo")])) +
theme_minimal() + theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(size = 10, face = "bold", angle = 45)) +
ggtitle("Mi métrica")
drop_na(mod_info)
mod_info<- drop_na(mod_info)
saveRDS(model, paste("./mod/", "bayes", sep=""))
total<- data.frame(metric = mod_info$metric,
ROC = mod_info$ROC,
modelo = "bayes",
family = "bay")
cv_all<- readRDS("./tab/cv_all")
cv_all<- rbind(cv_all, total)
medias<- as.data.frame(aggregate(metric~modelo, data=cv_all, mean))
ggplot(cv_all, aes(x=modelo, y=metric, fill=family)) +
geom_boxplot(outlier.colour="red", outlier.shape=20,
outlier.size=2) +
stat_summary(fun.y=mean, geom="point", colour="white",fill="grey", shape=21, size=3) +
scale_x_discrete(limits=as.vector(medias[order(medias$metric), c("modelo")])) +
theme_minimal() + theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(size = 10, face = "bold", angle = 45)) +
ggtitle("Mi métrica")
# 3. Make a Submission with the best model ----
saveRDS(cv_all, "./tab/cv_all")
datTest_fin<- cbind(datTest_sca, probTest[,c(2:ncol(datTest_sca))])
predict(model$finalModel, datTest_fin)
predict(model$finalModel, datTest_fin)$class
datTest_fin
predict(model$finalModel, datTrain_fin)
predict(model, datTest_fin)
# 3. Make a Submission with the best model ----
test_pred <- as.factor(ifelse(predict(model, datTest_fin) == "X0",0,1))
submission$Survived = test_pred
fwrite(submission, "bayes_sub.csv", row.names = FALSE)
submission
